1. 读取文件全部内容:  `bytes, err := os.ReadFile(jsonFilePath) `
2. 把文件放入扫描器，可以一行一行地读取:  `scanner := bufio.NewScanner(file) `
3. 正则表达式找到不同的组,result第0位是匹配的全部，后面几位是分组的结果:  `result := exp.FindStringSubmatch(txt) `
4. 创建文件并且可读可写:  `file, err := os.OpenFile(dstFile, os.O_CREATE|os.O_APPEND, 666) `
5. 每次写入都会清除缓存区:  `_, err = scanner.WriteString(data) `
6. 使用Flush把缓存区内容写入文件:  `scanner.Flush() `
7. 遍历文件夹:  `filepath.Walk(folderPath, func(path string, info fs.FileInfo, err error) error { `
8. 判断字符串是否以...开头: 
```js
if strings.HasPrefix(path, ".") { 
return nil
}
if !info.IsDir() && path != dstFile {
files = append(files, path)
}
return nil}) 
```
9. 清空切片 重新分配一个切片:  `p.allText = []text{} `
10. 把文件放入扫描器，可以一行一行地读取:  `scanner := bufio.NewScanner(file) `
11. 找到不同的组:  `result := exp.FindStringSubmatch(text) `
12. 清空切片 重新分配一个切片:  `matchedTexts = []string{} `
13. 每次写入都会清除缓存区:  `_, err = scanner.WriteString(data) `
14. 使用Flush把缓存区内容写入文件:  `scanner.Flush() `
15. 遍历文件夹: 
```js
filepath.Walk(folderPath, func(path string, info fs.FileInfo, err error) error { 
files = append(files, path)
return nil
}) 
```
16. 判断文件是否存在: 
```jsfunc IsExist(filePath string) bool {
if filePath == "" {
return false
}
_, err := os.Stat(filePath)
if err == nil {
return true
}
return false
}
```
17. 处理命令行参数:  ``
18. 把文件的大小设置为0:  `os.Truncate(*output, 0) `
